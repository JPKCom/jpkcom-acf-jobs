name: Build WordPress Plugin ZIP, Generate Plugin Manifest & Deploy

on:
  release:
    types: [published]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Setup environment variables
      - name: Setup variables
        id: vars
        run: |
          echo "PLUGIN_SLUG=$(basename $GITHUB_REPOSITORY)" >> $GITHUB_ENV
          TAG_NAME=${GITHUB_REF##*/}
          TAG_NAME=${TAG_NAME#v}
          echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV
          echo "DATE=$(date +'%Y-%m-%d')" >> $GITHUB_ENV
          echo "ZIP_FILE=$(basename $GITHUB_REPOSITORY).zip" >> $GITHUB_ENV
          echo "DOWNLOAD_URL=https://github.com/${GITHUB_REPOSITORY}/releases/download/${GITHUB_REF##*/}/$(basename $GITHUB_REPOSITORY).zip" >> $GITHUB_ENV

      # 3. Setup Python
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      # 4. Install Pandoc
      - name: Install Pandoc
        run: |
          sudo apt-get update
          sudo apt-get install -y pandoc

      # 5. Generate HTML sections and extract contributors/tags
      - name: Convert README.md to HTML and extract meta
        run: |
          mkdir -p gh-pages-html gh-pages-json

          # Convert entire README.md to HTML
          pandoc README.md -f markdown -t html -o gh-pages-json/readme.html
          cp README.md gh-pages-html/index.md

          # Extract section HTMLs if they exist
          for SECTION in Description Installation Changelog FAQ; do
            CONTENT=$(awk "/^## $SECTION/{flag=1;next}/^## /{flag=0}flag" README.md)
            if [ ! -z "$CONTENT" ]; then
              echo "$CONTENT" | pandoc -f markdown -t html -o gh-pages-json/${SECTION,,}.html
            else
              echo "<!-- No $SECTION section found -->" > gh-pages-json/${SECTION,,}.html
            fi
          done

          # Extract Contributors
          CONTRIBUTORS=$(grep -m1 '^**Contributors:**' README.md | sed 's/\*\*Contributors:\*\* //' | tr ',' '\n' | awk '{$1=$1};1')
          if [ -z "$CONTRIBUTORS" ]; then
            CONTRIBUTORS="JPKCom"
          fi

          # Extract Tags
          TAGS=$(grep -m1 '^**Tags:**' README.md | sed 's/\*\*Tags:\*\* //' | tr ',' '\n' | awk '{$1=$1};1')
          if [ -z "$TAGS" ]; then
            TAGS="ACF, Fields, CPT, CTT, Taxonomy, Forms"
          fi

          echo "CONTRIBUTORS=$(echo $CONTRIBUTORS | jq -R -s -c 'split(\" \") | map(select(. != \"\"))')" >> $GITHUB_ENV
          echo "TAGS=$(echo $TAGS | jq -R -s -c 'split(\",\") | map(select(. != \"\"))')" >> $GITHUB_ENV

      # 6. Create ZIP archive of plugin
      - name: Create ZIP
        run: |
          zip -r "${{ env.ZIP_FILE }}" . -x '*.git*' -x '*.github*' -x '*.DS_Store*'

      # 7. Upload ZIP to GitHub release
      - name: Upload release ZIP
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ env.ZIP_FILE }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 8. Generate JSON manifest
      - name: Generate plugin JSON manifest
        shell: python
        run: |
          import os, json

          def load_section_html(filename):
              path = f"gh-pages-json/{filename}.html"
              if os.path.exists(path):
                  with open(path, encoding="utf-8") as f:
                      return f.read()
              return ""

          contributors_raw = json.loads(os.environ.get("CONTRIBUTORS", '["JPKCom"]'))
          contributors = {}
          for username in contributors_raw:
              username = username.strip()
              if username:
                  contributors[username] = {
                      "profile": f"https://profiles.wordpress.org/{username}",
                      "avatar": f"https://wordpress.org/grav-redirect.php?user={username}&s=36"
                  }

          plugin = {
              "name": "JPKCom ACF Jobs",
              "slug": os.environ.get("PLUGIN_SLUG"),
              "version": os.environ.get("TAG_NAME"),
              "download_url": os.environ.get("DOWNLOAD_URL"),
              "requires": "6.8",
              "tested": "6.9",
              "requires_php": "8.3",
              "author": "<a href='https://www.jpkc.com/'>Jean Pierre Kolb</a>",
              "author_profile": "https://www.jpkc.com/",
              "contributors": contributors,
              "tags": [t.strip() for t in json.loads(os.environ.get("TAGS", '["ACF","Fields","CPT","CTT","Taxonomy","Forms"]'))],
              "license": "GPL-2.0+",
              "license_uri": "http://www.gnu.org/licenses/gpl-2.0.txt",
              "text_domain": "jpkcom-acf-jobs",
              "domain_path": "/languages",
              "network": True,
              "requires_plugins": ["advanced-custom-fields-pro","acf-quickedit-fields"],
              "homepage": "https://github.com/JPKCom/jpkcom-acf-jobs",
              "last_updated": os.environ.get("DATE"),
              "sections": {
                  "description": load_section_html("description"),
                  "installation": load_section_html("installation"),
                  "changelog": load_section_html("changelog"),
                  "faq": load_section_html("faq")
              },
              "readme_html": load_section_html("readme"),
              "banners": {
                  "low": f"https://jpkcom.github.io/{os.environ.get('PLUGIN_SLUG')}/assets/jpkcom-acf-jobs-banner-772x250.avif",
                  "high": f"https://jpkcom.github.io/{os.environ.get('PLUGIN_SLUG')}/assets/jpkcom-acf-jobs-banner-1544x500.avif"
              }
          }

          os.makedirs("gh-pages-json", exist_ok=True)
          with open(f"gh-pages-json/plugin_{os.environ.get('PLUGIN_SLUG')}.json", "w", encoding="utf-8") as f:
              json.dump(plugin, f, indent=2, ensure_ascii=False)

      # 9. Prepare gh-pages deployment folder
      - name: Prepare gh-pages deployment
        run: |
          mkdir -p gh-pages-deploy
          cp -r gh-pages-json/* gh-pages-deploy/
          cp -r gh-pages-html/* gh-pages-deploy/
          if [ -d "assets" ]; then
            cp -r assets gh-pages-deploy/
          fi

      # 10. Deploy to gh-pages branch
      - name: Deploy to gh-pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: gh-pages-deploy
          publish_branch: gh-pages
          keep_files: false
